define({
    featureSelected: function() {
        var formToBeNavigated = null;
        switch (this.view.segFeatureOptions.selectedRowIndex[1]) {
            case 0:
                formToBeNavigated = "frmTap";
                data = [{
                    "APIName": "Tap Gesture",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*Tap Gesture*/<label><br><label style=color:#f2f1f1>/*<br>@function onTapClosure<br>@description Specifies the function that needs to be executed when a gesture is recognized<br>@param widgetRef- specifies the handle to the widget on which the gesture was recognized<br>@param gestureInfo- Table with information about the gesture<br>@defined in the frmTapController<br>*/</label><br><label style=color:#ffffff>onTapClosure:function(widgetRef,gestureInfo){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addSingleTapGesture<br>@description function to invoke single tap gesture<br>@defined in the frmTapController<br>*/</label><br><label style=color:#ffffff>addSingleTapGesture:function(){<br>var tapConfig={fingers:1,taps:1};<br>this.view.flxSingle.addGestureRecognizer(constants.GESTURE_TYPE_TAP,tapConfig,this.onTapClosure);<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addDoubleTapGesture <br>@description-function to invoke Double tap gesture <br>@defined in the frmTapController<br>*/</label><br><label style=color:#ffffff>  addDoubleTapGesture:function(){<br>var tapConfig={fingers:1,taps:2};<br>this.view.flxDouble.addGestureRecognizer(constants.GESTURE_TYPE_TAP,tapConfig,this.onTapClosure);<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                break;
            case 1:
                formToBeNavigated = "frmSwipe";
                data = [{
                    "APIName": "Swipe Gesture",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*Swipe Gesture*/<label><br><label style=color:#f2f1f1>/*<br>@function onSwipeClosure<br>@description Specifies the function that needs to be executed when a gesture is recognized<br>@param widgetRef- specifies the handle to the widget on which the gesture was recognized<br>@param gestureInfo- Table with information about the gesture<br>@defined in the frmSwipeController<br>*/</label><br><label style=color:#ffffff>onSwipeClosure:function(widgetRef,gestureInfo){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addSwipeGesture<br>@description function to invoke Swipe gesture<br>@defined in the frmSwipeController<br>*/</label><br><label style=color:#ffffff>addSwipeGesture:function(){<br>var swipeConfig={fingers:1,swipedistance:50,swipevelocity:75};<br>this.view.flxSwipe.addGestureRecognizer(constants.GESTURE_TYPE_SWIPE,swipeConfig,this.onSwipeClosure);<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                break;
            case 2:
                formToBeNavigated = "frmLongPress";
                data = [{
                    "APIName": "LongPress Gesture",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*LongPress Gesture*/<label><br><label style=color:#f2f1f1>/*<br>@function onLongpressClosure<br>@description Specifies the function that needs to be executed when a gesture is recognized<br>@param widgetRef- specifies the handle to the widget on which the gesture was recognized<br>@param gestureInfo- Table with information about the gesture<br>@defined in the frmLongPressController<br>*/</label><br><label style=color:#ffffff>onLongpressClosure:function(widgetRef,gestureInfo){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addLongPressGesture<br>@description function to invoke LongPress gesture<br>@defined in the frmLongPressController<br>*/</label><br><label style=color:#ffffff>addLongPressGesture:function(){<br>var getTime=parseInt(this.view.lstbx.selectedKey);<br>var longConfig={pressDuration:getTime};<br>gesturehandle=this.view.flxLongpress.addGestureRecognizer(constants.GESTURE_TYPE_LONGPRESS,longConfig,this.onLongpressClosure);<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                break;
            case 3:
                formToBeNavigated = "frmPan";
                data = [{
                    "APIName": "Pan Gesture",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*Pan Gesture*/<label><br><label style=color:#f2f1f1>/*<br>@function onPanclosure<br>@description Specifies the function that needs to be executed when a gesture is recognized<br>@param widgetRef- specifies the handle to the widget on which the gesture was recognized<br>@param gestureInfo- Table with information about the gesture<br>@defined in the frmPanController<br>*/</label><br><label style=color:#ffffff>onPanclosure:function(widgetRef,gestureInfo){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addPanGesture<br>@description function to invoke Pan gesture<br>@defined in the frmPanController<br>*/</label><br><label style=color:#ffffff>addPanGesture:function(){<br>var panConfig={fingers :1,continuousEvents :false};<br>this.view.flxpan.addGestureRecognizer(constants.GESTURE_TYPE_PAN,panConfig,this.onPanclosure);<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                break;
            case 4:
                formToBeNavigated = "frmPinch";
                data = [{
                    "APIName": "Pinch Gesture",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*Pinch Gesture*/<label><br><label style=color:#f2f1f1>/*<br>@function onPinchClosure<br>@description Specifies the function that needs to be executed when a gesture is recognized<br>@param widgetRef- specifies the handle to the widget on which the gesture was recognized<br>@param gestureInfo- Table with information about the gesture<br>@defined in the frmPinchController<br>*/</label><br><label style=color:#ffffff>onPinchClosure:function(widgetRef,gestureInfo){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addPinchGesture<br>@description function to invoke Pinch gesture<br>@defined in the frmPinchController<br>*/</label><br><label style=color:#ffffff>addPinchGesture:function(){<br>var pinchConfig={fingers :2,continuousEvents :true};<br>this.view.flxPinch.addGestureRecognizer(constants.GESTURE_TYPE_PINCH,pinchConfig,this.onPinchClosure);<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                break;
            case 5:
                formToBeNavigated = "frmRotation";
                data = [{
                    "APIName": "Rotation Gesture",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*Rotation Gesture*/<label><br><label style=color:#f2f1f1>/*<br>@function onRotateClosure<br>@description Specifies the function that needs to be executed when a gesture is recognized<br>@param widgetRef- specifies the handle to the widget on which the gesture was recognized<br>@param gestureInfo- Table with information about the gesture<br>@defined in the frmRotationController<br>*/</label><br><label style=color:#ffffff>onRotateClosure:function(widgetRef,gestureInfo){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function addRotateGesture<br>@description function to invoke Rotation gesture<br>@defined in the frmRotationController<br>*/</label><br><label style=color:#ffffff>addRotateGesture:function(){<br>var rotateConfig={fingers :2,continuousEvents :true};<br>this.view.flxRotation.addGestureRecognizer(constants.GESTURE_TYPE_ROTATION,rotateConfig,this.onRotateClosure);<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                break;
            default:
                data = [{
                    "APIName": "Gesture API",
                    "Description": "A gesture is an action associated with movement of a mouse or a touch screen action. The developers determine how a gesture should be interpreted and the function that must be executed when a gesture is recognized.",
                    "CodeSnippet": '<label style="font-weight:bold;color:#f2f1f1;">/*Get Position*/<label><br><label style=color:#f2f1f1>/*<br>@function geoSuccessCallback<br>@description success callback method for the geo location API<br>@param positions- position data from the response of response of geo API<br>@defined in the frmGeoDataController<br>*/</label><br><label style=color:#ffffff>geoSuccessCallback:function(positions){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function geoFailureCallback<br>@description failure callback method for the geo location API<br>@param result- result data<br>@defined in the frmGeoDataController<br>*/</label><br><label style=color:#ffffff>geoFailureCallback:function(result){<br>//do something<br>}<br></label><label style=color:#f2f1f1>/*<br>@function getPosition<br>@description function to invoke the getPosition method which invokes the geoPosition method.<br>@defined in the frmGeoDataController<br>*/</label><br><label style=color:#ffffff>getPosition:function(){<br>var self=this;<br>kony.application.showLoadingScreen("sknFrmLoading","please wait...",constants.LOADING_SCREEN_POSITION_ONLY_CENTER, false,true,null);<br>geoPosition(self.geoSuccessCallback.bind(this),self.geoFailureCallback.bind(this));<br>}<br></label><label style=color:#f2f1f1>/*<br>@function geoPosition <br>@description-To get the current location of the device <br>@param successCallback - successCallback handler<br>@param failureCallback - failureCallback handler.<br>@defined in the module<br>*/</label><br><label style=color:#ffffff>function geoPosition(successCallback,failureCallback)<br>{<br>var positionoptions={};<br>positionoptions.enableHighAccuracy=true;<br>positionoptions.timeout=10000;<br>positionoptions.maximumAge=1000;<br>try<br>{<br>kony.location.getCurrentPosition(successCallback, failureCallback,positionoptions);<br>}<br>catch(exception)<br>{<br>alert("Exception is ::"+exception.message);<br>}<br>}<br></label><br><br><label style="font-weight:bold;color:#f2f1f1;">/*Watch Position*/<label><br><label style=color:#f2f1f1>/*<br>@function geoSuccessCallback<br>@description success callback method for the geo location API<br>@param positions- position data from the response of response of geo API<br>@defined in the frmGeoDataController<br>*/<br>geoSuccessCallback:function(positions){<br>//do something<br>},<br><label style=color:#f2f1f1>/*<br>@function geoFailureCallback<br>@description failure callback method for the geo location API<br>@param result- result data<br>@defined in the frmGeoDataController<br>*/<br>geoFailureCallback:function(result){<br>//do something<br>},<br><label style=color:#f2f1f1>/*<br>@function watchPosition<br>@description function to invoke the watchPosition method defined in the module.<br>@defined in the frmGeoDataController<br>*/</label><br><label style=color:#ffffff>watchPosition:function(){<br>var self=this;<br>kony.application.showLoadingScreen("sknFrmLoading","please wait...",constants.LOADING_SCREEN_POSITION_ONLY_CENTER, false,true,null);<br>this.watchID=watchPosition(self.geoSuccessCallback.bind(this),self.geoFailureCallback.bind(this));<br>}<br></label><label style=color:#f2f1f1>/*<br>@function watchPosition defined in the module to invoke the watchPosition API<br>@description-To get the current location of the device <br>@param successCallback - successCallback handler<br>@param failureCallback - failureCallback handler.<br>@return watchID of the geo change watcher generated in the watch API call.*/</label><br><label style=color:#ffffff>function watchPosition(successCallback,failureCallback)<br>{<br>var positionoptions={};<br>positionoptions.enableHighAccuracy=true;<br>positionoptions.timeout=20000;<br>positionoptions.maximumAge=1000;<br>var watchID=null;<br>try<br>{<br>watchID=kony.location.watchPosition (successCallback,failureCallback, positionoptions);<br>}catch(err)<br>{<br>kony.print(err.message);<br>}<br>return watchID;<br>}<br></label><br><br><label style="font-weight:bold;color:#f2f1f1;">/*Clear Watch*/<label><br><label style=color:#f2f1f1>/*<br>@function clearWatch <br>@description-To remove the watcher for the watch position <br>@defined in the form controller<br>@required watchID,holding the ID of the existing position watcher.<br>*/</label><br><label style=color:#ffffff>clearWatch:function(){<br>if(this.watchID===null)return;<br>try{<br>kony.location.clearWatch(this.watchID);<br>var basicConf={message: "Watch has been stopped.",alertType: constants.<br>ALERT_TYPE_INFO,alertTitle: "clearWatch",yesLabel:"OK",<br>noLabel: "no"};<br>var pspConf={};<br>var infoAlert=kony.ui.Alert(basicConf,pspConf);<br>}catch(excp){<br>kony.print(excp.message);<br>alert(excp.message);<br>}<br>}<br></label>',
                    "DocLink": 'Please find below the link for the documentation site:<br><a href = "http://docsdirect.kony.com/6_0/konyonpremises/Subsystems/API_Reference_Guide/content/gestures.htm#onGestureClosure"> Gesture API </a><br>'
                }];
                kony.print("You Shld not be here!!!");
                return;
        }
        var ntf = new kony.mvc.Navigation(formToBeNavigated);
        ntf.navigate();
    }
});